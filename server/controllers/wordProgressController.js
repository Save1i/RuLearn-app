const { WordProgress, Word } = require('../modules/modules');
const ApiError = require("../error/apiError");

class WordProgressController {
  async create(req, res, next) {
    console.log('req.body:', req.body);  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    try {
      const { wordId, userId, remembered } = req.body;
  
      if (!wordId || !userId || remembered === undefined) {
        return next(ApiError.badRequest("wordId, userId –∏ remembered –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"));
      }
  
      let progress = await WordProgress.findOne({ where: { wordId, userId } });
      const today = new Date();
  
      if (!progress) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const nextReview = remembered ? addDays(today, 1) : today;
  
        progress = await WordProgress.create({
          wordId,
          userId,
          last_seen: today,
          next_review: nextReview,
          interval: remembered ? 1 : 0,
          repetition: remembered ? 1 : 0,
          ease_factor: 2.5,
          status: "learning",
        });
  
        return res.json(progress);
      }
  
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      if (!remembered) {
        progress.interval = 1;
        progress.repetition = 0;
        progress.ease_factor = 2.5;
        progress.next_review = addDays(today, 1);
        progress.last_seen = today;
        progress.status = "learning";
      } else {
        progress.repetition += 1;
        progress.ease_factor = Math.max(1.3, progress.ease_factor - 0.2);
        progress.interval = calculateInterval(progress.repetition, progress.ease_factor);
        progress.next_review = addDays(today, progress.interval);
        progress.last_seen = today;
        progress.status = "learning";
      }
  
      await progress.save();
      return res.json(progress);
    } catch (error) {
      next(ApiError.internal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–ª–æ–≤–∞"));
    }
  }
  

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å–ª–æ–≤—É (–≤—Å–ø–æ–º–Ω–∏–ª / –Ω–µ –≤—Å–ø–æ–º–Ω–∏–ª)
async update(req, res, next) {
    try {
      const { wordId, userId, remembered } = req.body;
  
      if (typeof remembered !== "boolean" || wordId === undefined || userId === undefined) {
        return next(ApiError.badRequest("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å userId, wordId –∏ remembered (boolean)"));
      }
  
      const progress = await WordProgress.findOne({ where: { wordId, userId } });
      if (!progress) {
        return next(ApiError.badRequest("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–ª–æ–≤—É –Ω–µ –Ω–∞–π–¥–µ–Ω"));
      }
  
      let { repetition, ease_factor, interval } = progress;
      const today = new Date();
  
      if (!remembered) {
        // –ï—Å–ª–∏ –Ω–µ –≤—Å–ø–æ–º–Ω–∏–ª ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë
        repetition = 0;
        interval = 1;
        ease_factor = 2.5;
      } else {
        // –ï—Å–ª–∏ –≤—Å–ø–æ–º–Ω–∏–ª ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        if (repetition === 0) {
          interval = 1;
        } else if (repetition === 1) {
          interval = 6;
        } else {
          interval = Math.round(interval * ease_factor);
        }
  
        repetition += 1;
  
        // –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∞–µ–º ease_factor –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –±—ã–ª —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–æ—Å—Ç
        ease_factor = Math.max(1.3, ease_factor - 0.05);
      }
  
      const next_review = new Date(today);
      next_review.setDate(today.getDate() + interval);
  
      progress.repetition = repetition;
      progress.ease_factor = ease_factor;
      progress.interval = interval;
      progress.last_seen = today;
      progress.next_review = next_review;
  
      await progress.save();
      return res.json(progress);
  
    } catch (error) {
      next(ApiError.internal(error.message));
    }
  }
  

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
  async getDueWords(req, res, next) {
    try {
      const { userId } = req.query;

      if (!userId) {
        return next(ApiError.badRequest("–ù—É–∂–µ–Ω userId"));
      }

      const today = new Date()

      const dueWords = await WordProgress.findAll({
        where: {
          userId,
          next_review: {
            [require("sequelize").Op.lte]: today,
          },
        },
        include: [Word],
      });

      res.json(dueWords);
    } catch (error) {
      next(ApiError.internal(error.message));
    }
  }
}

// üìå –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  function addDays(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
  }
  
  function calculateInterval(repetition, easeFactor) {
    if (repetition === 1) return 1;
    if (repetition === 2) return 6;
    return Math.round((calculateInterval(repetition - 1, easeFactor)) * easeFactor);
  }

module.exports = new WordProgressController();
